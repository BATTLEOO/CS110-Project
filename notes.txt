1. For each problem, provide in no more than 100 words, a short, high-level description of the problem;
your approach to solve it; and any issues you encountered and if/how you managed to solve them.

Problem 1 (Reverse): def _reverse(a):
                        1. set n as the number of elements in a
                        2. create a for loop in half of the len(a) - n//2 is more efficient
                           a) swapping value between two side of the number, the most right and the most left
                        3. return a to _reverse(a)

Problem 2 (Euclidean Distance): def _distance(x, y):
                                    1. set d to 0.0 as float typed
                                    2. set n as the number of elements in x
                                    3. create for i in range n(exclude)
                                        a) increment dis everytime calculate the point use (x[i] - y[i]) ** 2
                                    4. return the value: total dis with sqrt root function
Problem 3 (Transpose): def _transpose(a):
                           1. set m as the number rows in a
                           2. set n as the number of columns in a
                           3. create c as a 2d list to store the value
                           4. create i in range n(exclude) as new rows
                                a) create j in range m(exclude) as new columns
                                    i) assign the number in a to the list c, row to column , column to row
                           5. return list c

Problem 4 (Palindrome): def _isPalindrome(s):
                            1. create for i in range len(s)/2
                                a) check the element is the same, e.g for 0 compare len -1 （last element in the list）
                                    i) if not same return False
                            2. return Ture no false happen in the if statement

Problem 5 (Sine Function): def _sin(x):
                                1. initialize total to 0.0, term to 1.0, sign to 1, and i to 1
                                2. create a while loop as long as total is not equal to total + term
                                        # when x is 60 i is 1 , return 60, what is actually the first value in the formular
                                        # 60/1 * 60/2 is the second loop which is not odd , so we will not use it, and the sign is positive because we do not satisfy the if statement
                                        # but we still store the value of the second loop, it is useful for the future calculation
                                        # i = 3 , 60/1 * 60/2 * 60/3, it is the same as 60^3 / 3!(it is 1*2*3), and the sign will be change to minus in the if statement
                                        a) create if statement check whether i is odd or not
                                             i) we record the term that is odd and sum it to total, add new sign * term to total
                                             ii) write sign = - sign, sign is changing every new loop, it can be see directly in the formular
                                        b) increment i by 1
                                 3. return total, the value that we want

Problem 6 (RSA Library): def keygen(lo, hi):
                            1. call function _primes to get the primes lis, from lo to hi(exclude)
                            2. call function _choice, and ensure p and q get two different primes
                            3. while p is equal to q call _choice, keep random to chose the value from lis until we get a different value
                                   a) q = _choice(lis) , need to ensure that they have different value, if not raise an error
                            4. set m and n by the given formular
                            5. call _primes create prime lis2 from 2 to m(exclude)
                            6. create while loop forever until break
                                    a) call _choice from lis2
                                    b) if remainder is zero keep looping, until random e with non-zero remainder
                                            i) meet condition non-zero remainder, break and step out the loop
                            7. initial d
                            8. create for loop in range from 1 to m(exclude)
                                    a) create if e * i % m == 1 we keep the value (d = i) and break
                            9. return n, d, e in order as tuple

                         def encrypt(x, n, e):
                            1. return the value by using encrypt formular (x ** e) % n

                         def decrypt(y, n, d):
                            1. return the value by using decrypt formular (y ** d) % n

                         def _primes(lo, hi):
                            1. create an empty list isprime (for checking)
                            2. create a list that have hi element, default value is True
                                    a) Append [True] to isprime
                            3. set isprime[0] and isprime[1], 1 and 0 is not prime number
                            4. create a for loop in range from 2 to hi (include hi itself)
                                    a) create if isprime is True, we get in to check whether is prime num
                                            i) create for loop in range 2 to hi // i (include), we mark all the value from 2 to hi // i + 1
                                                    i) make all the value that can be multiple to False
                            5. create a list prime to store prime number that is True
                            6. create for loop from lo to hi(exclude) check isprime from lo to hi(exclude)
                                    a) if True, add the value to prime
                            7. return the list prime

                         def _sample(a, k):
                            1. copy list a to list b
                            2. create a copy from 0 to k(exclude) elements, we name it as fk(first k)
                            3. shuffle the first k elements of fk which is the first k elements in list b
                            4. return list fk, because the problem only need the k item in the list that is shuffled

                         def _choice(a):
                            1. set l to length of list a
                            2. random the index of list a, we set the value to r
                            3. return int(a[r]) as a random value from a list


Problem 7 (Keygen Program): def main():
                                1. create lo and hi as int arguments
                                2. call function rsa.keygen to get the public ke or private key as a tuple
                                3. write in standard output in newline with space between each key

Problem 8 (Encryption Program): def main():
                                    1. Public keys: accept n and e as int arguments
                                    2. get the number of bits for per character needed for encryption
                                    3. get the message from standard input, need to use stdio.readALL to read all the standard input, need to including \n
                                    4. create a for loop, go through the message
                                            a) use function ord() to turn c into an integer x
                                            b) encrypt x one by one
                                            c) we write the encrypted value as a width-long binary string, call rsa.dec2bin function, set encrypted width length and write in binary num in standard output
                                    5. write newline

Problem 9 (Decryption Program): def main():
                                    1. private key: accept n and d as int argument
                                    2. get the number of bits per character(width)
                                    3. use stdio.readAll to read the input from standard input, which will be the data from the encrypt.py.
                                    4. set l as the length of message
                                    5. create a for loop that is from  to l-1(exclude), and the step is width
                                            a) we set s as a part of the list from i(previous stop point) to i + width (new stop point)
                                            b) here we call rsa.bin2dec to convert binary to dec everytime
                                            c) call rsa.decrypt to decrypt y to character
                                            d) we obtained the value by using the built-in function chr()

2. Did you receive help from anyone? List their names, status (classmate, course staff, other), and
the nature of help received.

Name                   Status           Help Received
----                   ------           -------------

...                    ...              ...

3. List any other comments here. Feel free to provide any feedback on how much you learned from
doing the assignment, and whether you enjoyed doing it.

...
